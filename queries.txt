**Problem 1:**
- **Prerequisite**: Understand creating tables in SQL / collections in MongoDB
- **Problem**: Create a **`Customers`** table / collection with the following fields: **`id`** (unique identifier), **`name`**, **`email`**, **`address`**, and **`phone_number`**.

CREATE TABLE Customers (
  id INT PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255),
  address VARCHAR(255),
  phone_number VARCHAR(20)
);

**Problem 2:**
- **Prerequisite**: Understand inserting data into SQL tables / MongoDB collections
- **Problem**: Insert five rows / documents into the **`Customers`** table / collection with data of your choice.

INSERT INTO Customers (id, name, email, address, phone_number)
VALUES
  (1, 'John Doe', 'johndoe@example.com', '123 Main St, City', '123-456-7890'),
  (2, 'Jane Smith', 'janesmith@example.com', '456 Elm St, Town', '987-654-3210'),
  (3, 'Mike Johnson', 'mikejohnson@example.com', '789 Oak Ave, Village', '555-123-4567'),
  (4, 'Sarah Williams', 'sarahwilliams@example.com', '321 Maple Rd, County', '888-999-0000'),
  (5, 'David Brown', 'davidbrown@example.com', '654 Pine Dr, State', '444-777-2222');

**Problem 3:**
- **Prerequisite**: Understand basic data fetching in SQL / MongoDB
- **Problem**: Write a query to fetch all data from the **`Customers`** table / collection.

SELECT * FROM Customers;

**Problem 4:**
- **Prerequisite**: Understand how to select specific fields in SQL / MongoDB
- **Problem**: Write a query to select only the **`name`** and **`email`** fields for all customers.

SELECT name, email FROM Customers;

**Problem 5:**
- **Prerequisite**: Understand basic WHERE clause in SQL / MongoDB's find method
- **Problem**: Write a query to fetch the customer with the **`id`** of 3.

SELECT * FROM Customers WHERE id = 3;

**Problem 6:**
- **Prerequisite**: Understand using string patterns in SQL (LIKE clause) / using regex in MongoDB
- **Problem**: Write a query to fetch all customers whose **`name`** starts with 'A'.

SELECT * FROM Customers WHERE name LIKE 'A%';

**Problem 7:**
- **Prerequisite**: Understand how to order data in SQL / MongoDB
- **Problem**: Write a query to fetch all customers, ordered by **`name`** in descending order.

SELECT * FROM Customers ORDER BY name DESC;

**Problem 8:**
- **Prerequisite**: Understand data updating in SQL / MongoDB
- **Problem**: Write a query to update the **`address`** of the customer with **`id`** 4.

UPDATE Customers SET address = 'New Address' WHERE id = 4;

**Problem 9:**
- **Prerequisite**: Understand how to limit results in SQL / MongoDB
- **Problem**: Write a query to fetch the top 3 customers when ordered by **`id`** in ascending order.

SELECT * FROM Customers ORDER BY id ASC LIMIT 3;

**Problem 10:**
- **Prerequisite**: Understand data deletion in SQL / MongoDB
- **Problem**: Write a query to delete the customer with **`id`** 2.

DELETE FROM Customers WHERE id = 2;

**Problem 11:**
- **Prerequisite**: Understand how to count rows / documents in SQL / MongoDB
- **Problem**: Write a query to count the number of customers.

SELECT COUNT(*) FROM Customers;

**Problem 12:**
- **Prerequisite**: Understand how to skip rows / documents in SQL / MongoDB
- **Problem**: Write a query to fetch all customers except the first two when ordered by **`id`** in ascending order.

SELECT * FROM Customers ORDER BY id ASC OFFSET 2;

**Problem 13:**
- **Prerequisite**: Understand filtering with multiple conditions in SQL / MongoDB
- **Problem**: Write a query to fetch all customers whose **`id`** is greater than 2 and **`name`** starts with 'B'.

SELECT * FROM Customers WHERE id > 2 AND name LIKE 'B%';

**Problem 14:**
- **Prerequisite**: Understand how to use OR conditions in SQL / MongoDB
- **Problem**: Write a query to fetch all customers whose **`id`** is less than 3 or **`name`** ends with 's'.

SELECT * FROM Customers WHERE id < 3 OR name LIKE '%s';

**Problem 15:**
- **Prerequisite**: Understand how to use NULL checks in SQL / MongoDB
- **Problem**: Write a query to fetch all customers where the **`phone_number`** field is not set or is null.

SELECT * FROM Customers WHERE phone_number IS NULL OR phone_number = '';
